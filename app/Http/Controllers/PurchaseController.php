<?php
 namespace App\Http\Controllers; use App\Models\accounts; use App\Models\products; use App\Models\purchase; use App\Models\purchase_details; use App\Models\purchase_payments; use App\Models\stock; use App\Models\transactions; use App\Models\units; use App\Models\warehouses; use Exception; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; class PurchaseController extends Controller { public function index(Request $request) { $start = $request->start ?? now()->toDateString(); $end = $request->end ?? now()->toDateString(); $purchases = purchase::with("\x70\141\171\155\x65\x6e\164\x73")->whereBetween("\144\141\164\x65", array($start, $end))->orderby("\x69\144", "\x64\x65\x73\x63")->get(); return view("\x70\x75\162\x63\150\x61\x73\145\56\x69\156\144\x65\170", compact("\160\x75\x72\x63\x68\141\x73\145\x73", "\x73\164\141\x72\x74", "\145\x6e\x64")); } public function create() { $products = products::orderby("\156\x61\155\x65", "\141\x73\143")->get(); $units = units::all(); $vendors = accounts::vendor()->get(); $accounts = accounts::business()->get(); $warehouses = warehouses::all(); return view("\x70\x75\162\x63\150\x61\x73\145\56\143\x72\145\141\x74\x65", compact("\160\162\x6f\144\x75\x63\164\163", "\x75\x6e\x69\164\x73", "\166\145\156\144\x6f\162\163", "\141\x63\143\157\165\x6e\x74\x73", "\167\141\x72\x65\x68\x6f\165\x73\x65\163")); } public function store(Request $request) { try { if ($request->isNotFilled("\x69\x64")) { throw new Exception("\x50\154\x65\141\163\x65\x20\x53\x65\x6c\x65\x63\x74\x20\101\164\x6c\145\141\163\x74\x20\117\x6e\x65\40\120\x72\157\x64\x75\143\164"); } DB::beginTransaction(); $ref = getRef(); $purchase = purchase::create(array("\x76\x65\156\144\157\162\111\104" => $request->vendorID, "\167\141\162\x65\150\157\165\163\145\111\x44" => $request->warehouseID, "\x64\x61\164\x65" => $request->date, "\x6e\157\164\145\163" => $request->notes, "\x64\x69\x73\x63\x6f\x75\x6e\x74" => $request->discount, "\x66\x72\151\x67\150\164" => $request->fright, "\146\x72\151\147\x68\x74\61" => $request->fright1, "\x77\x68" => $request->whTax, "\x69\x6e\166" => $request->inv, "\162\145\146\111\104" => $ref)); $ids = $request->id; $total = 0; foreach ($ids as $key => $id) { $unit = units::find($request->unit[$key]); $qty = $request->qty[$key] * $unit->value + $request->bonus[$key]; $qty1 = $request->qty[$key] * $unit->value; $pprice = $request->pprice[$key]; $price = $request->price[$key]; $wsprice = $request->wsprice[$key]; $tp = $request->tp[$key]; $amount = $pprice * $qty1; $total += $amount; purchase_details::create(array("\160\x75\x72\143\x68\141\163\x65\x49\x44" => $purchase->id, "\x70\x72\157\x64\165\x63\x74\111\x44" => $id, "\x70\160\162\151\x63\145" => $pprice, "\160\x72\x69\x63\x65" => $price, "\x77\163\x70\162\151\143\x65" => $wsprice, "\x74\x70" => $tp, "\x71\164\171" => $qty1, "\147\x73\164\126\141\154\165\x65" => $request->gstValue[$key], "\141\155\157\x75\x6e\164" => $amount, "\144\141\x74\x65" => $request->date, "\142\x6f\156\x75\x73" => $request->bonus[$key], "\x75\x6e\151\164\111\104" => $unit->id, "\165\x6e\151\x74\126\141\x6c\165\145" => $unit->value, "\x72\x65\146\x49\104" => $ref)); createStock($id, $qty, 0, $request->date, "\x50\x75\x72\x63\x68\x61\x73\x65\x64", $ref, $request->warehouseID); $product = products::find($id); $product->update(array("\x70\160\162\151\x63\x65" => $pprice, "\x70\x72\151\143\x65" => $price, "\167\x73\160\x72\151\143\145" => $wsprice)); } $whTax = $total * $request->whTax / 100; $net = $total + $whTax + $request->fright1 - ($request->discount + $request->fright); $purchase->update(array("\x77\150\x56\x61\154\165\145" => $whTax, "\x6e\x65\164" => $net)); if ($request->status == "\x70\x61\151\144") { purchase_payments::create(array("\x70\165\x72\x63\150\141\163\x65\x49\x44" => $purchase->id, "\141\143\143\x6f\x75\x6e\x74\x49\x44" => $request->accountID, "\144\141\x74\x65" => $request->date, "\141\x6d\x6f\x75\x6e\164" => $net, "\x6e\157\x74\145\x73" => "\x46\165\154\154\40\x50\141\x69\x64", "\x72\145\x66\111\x44" => $ref)); createTransaction($request->accountID, $request->date, 0, $net, "\x50\141\x79\155\145\156\164\40\157\x66\40\120\x75\x72\x63\150\141\x73\145\x20\x4e\x6f\56\40{$purchase->id}", $ref); } else { createTransaction($request->vendorID, $request->date, 0, $net, "\x50\145\x6e\x64\x69\156\x67\x20\101\x6d\x6f\165\x6e\164\x20\x6f\x66\40\x50\165\162\x63\x68\141\x73\x65\40\x4e\157\x2e\x20{$purchase->id}", $ref); } DB::commit(); return back()->with("\163\x75\143\x63\145\163\x73", "\120\165\x72\143\x68\141\163\x65\x20\x43\x72\x65\x61\x74\x65\x64"); } catch (\Exception $e) { DB::rollback(); return back()->with("\145\x72\162\157\162", $e->getMessage()); } } public function show(purchase $purchase) { return view("\x70\165\162\143\150\141\163\145\x2e\x76\151\145\x77", compact("\x70\165\x72\143\150\x61\x73\145")); } public function edit(purchase $purchase) { $products = products::orderby("\156\141\155\145", "\x61\163\143")->get(); $units = units::all(); $vendors = accounts::vendor()->get(); $accounts = accounts::business()->get(); $warehouses = warehouses::all(); return view("\x70\165\162\143\150\141\x73\145\56\x65\x64\x69\x74", compact("\160\162\157\x64\165\x63\x74\x73", "\x75\156\x69\x74\163", "\x76\x65\156\x64\157\162\x73", "\141\x63\x63\157\165\156\164\x73", "\160\165\x72\x63\150\141\x73\x65", "\x77\x61\162\x65\x68\157\x75\163\145\163")); } public function update(Request $request, purchase $purchase) { try { if ($request->isNotFilled("\151\144")) { throw new Exception("\x50\154\145\x61\x73\145\40\123\145\154\145\143\164\x20\x41\164\x6c\x65\x61\x73\164\x20\117\x6e\145\40\x50\x72\x6f\144\x75\143\x74"); } DB::beginTransaction(); foreach ($purchase->payments as $payment) { transactions::where("\162\x65\x66\x49\x44", $payment->refID)->delete(); $payment->delete(); } foreach ($purchase->details as $product) { stock::where("\x72\x65\146\x49\104", $product->refID)->delete(); $product->delete(); } transactions::where("\162\x65\x66\x49\x44", $purchase->refID)->delete(); $purchase->update(array("\x76\145\x6e\144\157\x72\x49\104" => $request->vendorID, "\167\141\162\x65\x68\157\x75\x73\x65\x49\104" => $request->warehouseID, "\x64\141\164\145" => $request->date, "\156\x6f\x74\x65\x73" => $request->notes, "\x64\151\x73\143\x6f\x75\x6e\x74" => $request->discount, "\146\162\151\147\x68\x74" => $request->fright, "\x66\162\151\147\x68\164\61" => $request->fright1, "\167\x68" => $request->whTax, "\151\156\166" => $request->inv)); $ids = $request->id; $total = 0; $ref = $purchase->refID; dashboard(); foreach ($ids as $key => $id) { $unit = units::find($request->unit[$key]); $qty = $request->qty[$key] * $unit->value + $request->bonus[$key]; $qty1 = $request->qty[$key] * $unit->value; $pprice = $request->pprice[$key]; $price = $request->price[$key]; $wsprice = $request->wsprice[$key]; $tp = $request->tp[$key]; $amount = $pprice * $qty1; $total += $amount; purchase_details::create(array("\160\165\x72\x63\150\141\163\x65\111\x44" => $purchase->id, "\160\x72\x6f\144\x75\143\164\111\x44" => $id, "\160\160\162\151\143\145" => $pprice, "\x70\x72\151\x63\145" => $price, "\x77\x73\x70\162\x69\143\145" => $wsprice, "\x74\x70" => $tp, "\x71\164\x79" => $qty1, "\x67\163\x74\x56\141\154\x75\145" => $request->gstValue[$key], "\141\x6d\x6f\x75\156\164" => $amount, "\144\141\164\x65" => $request->date, "\142\x6f\156\x75\163" => $request->bonus[$key], "\x75\156\151\164\111\104" => $unit->id, "\x75\x6e\x69\x74\x56\141\x6c\x75\145" => $unit->value, "\x72\145\x66\111\x44" => $ref)); createStock($id, $qty, 0, $request->date, "\x50\x75\x72\x63\x68\141\x73\x65\x64", $ref, $request->warehouseID); $product = products::find($id); $product->update(array("\160\160\162\x69\143\x65" => $pprice, "\x70\x72\151\143\x65" => $price, "\x77\163\160\162\x69\143\145" => $wsprice)); } $whTax = $total * $request->whTax / 100; $net = $total + $whTax + $request->fright1 - ($request->discount + $request->fright); $purchase->update(array("\167\150\x56\141\154\x75\145" => $whTax, "\156\x65\164" => $net)); if ($request->status == "\x70\141\151\x64") { purchase_payments::create(array("\x70\165\x72\143\150\141\163\x65\111\104" => $purchase->id, "\141\143\x63\x6f\165\x6e\x74\111\x44" => $request->accountID, "\x64\x61\164\145" => $request->date, "\141\x6d\157\x75\156\164" => $net, "\156\157\x74\x65\x73" => "\x46\x75\x6c\x6c\40\x50\x61\x69\x64", "\x72\145\146\x49\x44" => $ref)); createTransaction($request->accountID, $request->date, 0, $net, "\x50\141\x79\x6d\x65\156\164\x20\x6f\x66\40\120\x75\162\143\x68\141\x73\x65\40\x4e\x6f\x2e\x20{$purchase->id}", $ref); } else { createTransaction($request->vendorID, $request->date, 0, $net, "\120\x65\x6e\x64\151\x6e\147\40\x41\x6d\157\165\x6e\x74\40\x6f\x66\40\120\x75\x72\x63\150\x61\163\x65\40\116\x6f\56\x20{$purchase->id}", $ref); } DB::commit(); return back()->with("\163\x75\143\143\x65\x73\163", "\120\165\x72\143\x68\141\x73\145\40\125\160\x64\x61\x74\145\144"); } catch (\Exception $e) { DB::rollback(); return back()->with("\145\x72\x72\157\162", $e->getMessage()); } } public function destroy($id) { try { DB::beginTransaction(); $purchase = purchase::find($id); foreach ($purchase->payments as $payment) { transactions::where("\x72\145\146\x49\104", $payment->refID)->delete(); $payment->delete(); } foreach ($purchase->details as $product) { stock::where("\x72\x65\146\111\x44", $product->refID)->delete(); $product->delete(); } transactions::where("\162\x65\x66\x49\x44", $purchase->refID)->delete(); $purchase->delete(); DB::commit(); session()->forget("\143\157\156\x66\151\162\155\145\x64\x5f\160\x61\163\163\x77\157\162\x64"); return redirect()->route("\160\x75\162\x63\x68\141\163\145\x2e\x69\156\144\x65\x78")->with("\x73\x75\x63\x63\x65\x73\x73", "\x50\165\x72\x63\x68\141\x73\145\40\104\145\154\x65\x74\145\144"); } catch (\Exception $e) { DB::rollBack(); session()->forget("\143\157\156\146\x69\x72\x6d\145\144\x5f\x70\x61\x73\x73\167\157\x72\x64"); return redirect()->route("\160\165\x72\143\x68\x61\163\145\56\151\156\x64\x65\170")->with("\x65\x72\162\157\x72", $e->getMessage()); } } public function getSignleProduct($id) { $product = products::find($id); return $product; } }